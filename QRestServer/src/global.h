//#ifndef GLOBAL_H
//#define GLOBAL_H

//#include <QtCore/QString>
//#include <QtCore/QHash>
//#include <QtCore/QVariant>
//#include <QtCore/QDebug>

//class QObject;
//struct QMetaObject;

//namespace QRestServer {

//enum PropertyAttribute {
//    NoAttributes = 0x0,
//    ReadOnly = 0x1
//};
//Q_DECLARE_FLAGS(PropertyAttributes, PropertyAttribute)

//#define QRestServerPropertyAttributesDelimiter ";"

//#define QRestServerKeyProperty "QRestServer::KeyProperty"
//#define QRestServerCollectionName "QRestServer::CollectionName"
//#define QRestServerKeyAutogenerated "QRestServer::KeyAutogenerated"
//#define QRestServerPropertyReadOnly "QRestServer::PropertyReadOnly;"

//#define QRestServerSelfLinkProperty "$self"

//QString objectKeyPropertyName(QObject *object);
//QString objectKey(QObject *object);
//bool isKeyAutogenerated(QObject *object);
//PropertyAttributes propertyAttributes(const char* property, QObject *object);

//QString collectionName(QObject *object);
//QString collectionName(const QMetaObject &metaObject);
//template<class O>
//QString collectionName()
//{
//    return collectionName(O::staticMetaObject);
//}

//const QString HttpHeaderContentType("Content-Type");
//const QString HttpHeaderContentLength("Content-Length");

//#define CALL_WHEN_DESTROYED( object, call ) \
//static QMetaObject::Connection connection; \
//if (connection) \
//    disconnect(connection); \
//connection = connect(object, &QObject::destroyed, [=]() { call });

//    class ConverterBase
//    {
//    public:
//        virtual ~ConverterBase() {}
//        virtual QList<QObject *> convert(const QVariant &variant) const = 0;
//    };

//    template<class Object>
//    class Converter : public ConverterBase
//    {
//    public:
//        QList<QObject *> convert(const QVariant &variant) const
//        {
//            QList<Object *> list = variant.value<QList<Object *> >();
//            QList<QObject *> result;
//            Q_FOREACH(Object *object, list) result.append(object);
//            return result;
//        }
//    };

//    class VariantToObjectListConverter
//    {
//    public:
//        Q_GLOBAL_STATIC(VariantToObjectListConverter, instance)

//        ~VariantToObjectListConverter()
//        {
//            QHashIterator<int, ConverterBase *> i(m_converters);
//            while (i.hasNext()) {
//                i.next();
//                delete i.value();
//            }
//        }

//        template<class Object>
//        void registerConverter()
//        {
//            QVariant v = QVariant::fromValue<QList<Object *> >(QList<Object *>());
//            m_converters.insert(v.userType(), new Converter<Object>());
//        }

//        QList<QObject *> convert(const QVariant &variant) const
//        {
//            ConverterBase *converter = m_converters.value(variant.userType());
//            if (!converter)
//                return QList<QObject *>();

//            return converter->convert(variant);
//        }

//    private:
//        QHash<int, ConverterBase *> m_converters;

//        VariantToObjectListConverter() {}
//    };


//} // namespace QRestServer

//Q_DECLARE_OPERATORS_FOR_FLAGS(QRestServer::PropertyAttributes)

//#endif // GLOBAL_H
